DEBUG = 0
LIBRETRO_OPTIMIZATIONS = 1
FRONTEND_SUPPORTS_RGB565 = 1
HAVE_GRIFFIN = 0
# fastcall only works on x86_32
FASTCALL = 0
WANT_NEOGEOCD = 0
USE_SPEEDHACKS = 1
EXTERNAL_ZLIB = 0
TOAPLAN_SOUND_SAMPLES_HACK = 1
INCLUDE_7Z_SUPPORT = 1
PTR64 ?= 1
INCLUDE_CPLUSPLUS11_FILES = 0
BUILD_X64_EXE = 0

# system platform
ifeq ($(platform),)
   platform = unix
   ifeq ($(shell uname -a),)
      platform = win
      EXE_EXT=.exe
   else ifneq ($(findstring Darwin,$(shell uname -a)),)
      platform = osx
      arch = intel
      ifeq ($(shell uname -p),powerpc)
         arch = ppc
      endif
   else ifneq ($(findstring MINGW,$(shell uname -a)),)
      platform = win
      EXE_EXT=.exe
   endif
else ifneq (,$(findstring armv,$(platform)))
   override platform += unix
else ifneq (,$(findstring rpi,$(platform)))
   override platform += unix
endif


MAIN_FBA_DIR	:= src
VERSION_SCRIPT	:= $(MAIN_FBA_DIR)/burner/libretro/link.T

INLINE_LIMIT=-finline-limit=1200

# GCC < 4.9 and clang does not support -fno-tree-loop-vectorize
ifeq ($(shell expr `gcc -dumpversion | cut -f1` \< 4.9), 1)
   INLINE_LIMIT=
endif
ifneq (, $(findstring clang,$(CC)))
   INLINE_LIMIT=
endif
ifneq (, $(findstring clang,$(CXX)))
   INLINE_LIMIT=
endif

# TARGET
TARGET_NAME := fbalpha

ifeq ($(PTR64), 1)
   FBA_DEFINES += -DPTR64
endif

TARGET := $(TARGET_NAME)_libretro.so
fpic := -fPIC
SHARED := -shared -Wl,-no-undefined -Wl,--version-script=$(VERSION_SCRIPT)
ENDIANNESS_DEFINES := -DLSB_FIRST
PLATFORM_DEFINES := -marm -mcpu=cortex-a9 -mfpu=neon -mfloat-abi=hard -ffast-math

CC_SYSTEM = gcc
CXX_SYSTEM = g++

include makefile.libretro_common

FBA_CXXOBJ := $(SOURCES_CXX:.cpp=.o)
FBA_COBJ := $(SOURCES_C:.c=.o)

OBJS := $(FBA_COBJ) $(FBA_CXXOBJ)

FBA_DEFINES += -D__LIBRETRO__ \
	$(ENDIANNESS_DEFINES) \
	$(PLATFORM_DEFINES)

INCFLAGS := $(foreach dir,$(INCLUDE_DIRS),-I$(dir))

ifeq ($(LIBRETRO_OPTIMIZATIONS), 1)
   FBA_DEFINES += -D__LIBRETRO_OPTIMIZATIONS__
   GENERATE_OPTS := -D__LIBRETRO_OPTIMIZATIONS__
else
   GENERATE_OPTS :=
endif

ifeq ($(USE_SPEEDHACKS), 1)
   FBA_DEFINES += -DUSE_SPEEDHACKS
endif

ifeq ($(FASTCALL), 1)
   FBA_DEFINES += -DFASTCALL
endif

ifeq ($(TOAPLAN_SOUND_SAMPLES_HACK), 1)
   FBA_DEFINES += -DTOAPLAN_SOUND_SAMPLES_HACK
endif

ifeq ($(DEBUG), 1)
   CFLAGS += -O0 -g -DFBA_DEBUG
   CXXFLAGS += -O0 -g -DFBA_DEBUG
else
   CFLAGS += -O3 -DNDEBUG
   CXXFLAGS += -O3 -DNDEBUG
endif

CFLAGS += $(fpic) $(FBA_DEFINES)
CXXFLAGS += $(fpic) $(FBA_DEFINES)
LDFLAGS += $(fpic)

CFLAGS += -fforce-addr $(INLINE_LIMIT)  \
	   -Wall -Wno-long-long -Wno-sign-compare -Wno-uninitialized -Wno-unused \
	   -Wno-sequence-point -Wno-strict-aliasing
CXXFLAGS += -fforce-addr $(INLINE_LIMIT) \
	   -fcheck-new \
	   -Wall -W -Wshadow -Wno-long-long -Wno-write-strings \
	   -Wunknown-pragmas -Wundef -Wno-conversion -Wno-missing-braces -Wno-multichar \
	   -Wuninitialized -Wpointer-arith -Wno-inline -Wno-unused-value \
	   -Wno-sequence-point -Wno-extra -Wno-strict-aliasing

ifeq (,$(filter $(platform), ps3 sncps3))
   CFLAGS += -Wno-write-strings -Wno-pedantic
   CXXFLAGS += -Wno-write-strings -pedantic -Wno-address -Wno-unused-but-set-variable -Wno-narrowing -Wno-pedantic
endif

ifeq ($(FRONTEND_SUPPORTS_RGB565), 1)
   CFLAGS += -DFRONTEND_SUPPORTS_RGB565
   CXXFLAGS += -DFRONTEND_SUPPORTS_RGB565
endif

PERL = perl$(EXE_EXT)
M68KMAKE_EXE = m68kmake$(EXE_EXT)
CTVMAKE_EXE = ctvmake$(EXE_EXT)
PGM_SPRITE_CREATE_EXE = pgmspritecreate$(EXE_EXT)
EXE_PREFIX = ./

.PHONY: clean generate-files generate-files-clean clean-objs

ifeq ($(platform), theos_ios)
	COMMON_FLAGS := -DIOS -DARM $(COMMON_DEFINES) $(INCFLAGS) -I$(THEOS_INCLUDE_PATH) -Wno-error
	$(LIBRARY_NAME)_CFLAGS += $(CFLAGS) $(COMMON_FLAGS)
	$(LIBRARY_NAME)_CXXFLAGS += $(CXXFLAGS) $(COMMON_FLAGS)
	${LIBRARY_NAME}_FILES = $(SOURCES_CXX) $(SOURCES_C)
	include $(THEOS_MAKE_PATH)/library.mk
else
all: $(TARGET)


generate-files-clean:
	rm -rf $(FBA_GENERATED_DIR)/
	rm -rf $(FBA_CPU_DIR)/m68k/m68kops.c
	rm -rf $(FBA_CPU_DIR)/m68k/m68kops.h

generate-files:
	@mkdir -p $(FBA_GENERATED_DIR) 2>/dev/null || /bin/true
	@echo "Generating $(FBA_GENERATED_DIR)/driverlist.h..."
	@echo ""
	$(PERL) $(FBA_SCRIPTS_DIR)/gamelist.pl -o $(FBA_GENERATED_DIR)/driverlist.h -l gamelist.txt $(FBA_BURN_DRIVERS_DIR) $(FBA_BURN_DRIVERS_DIR)/capcom $(FBA_BURN_DRIVERS_DIR)/cave $(FBA_BURN_DRIVERS_DIR)/coleco $(FBA_BURN_DRIVERS_DIR)/cps3 $(FBA_BURN_DRIVERS_DIR)/dataeast $(FBA_BURN_DRIVERS_DIR)/galaxian $(FBA_BURN_DRIVERS_DIR)/irem $(FBA_BURN_DRIVERS_DIR)/konami $(FBA_BURN_DRIVERS_DIR)/megadrive $(MIDWAY_DIR) $(FBA_BURN_DRIVERS_DIR)/msx $(FBA_BURN_DRIVERS_DIR)/neogeo $(FBA_BURN_DRIVERS_DIR)/pce $(FBA_BURN_DRIVERS_DIR)/pgm $(FBA_BURN_DRIVERS_DIR)/pre90s $(FBA_BURN_DRIVERS_DIR)/psikyo $(FBA_BURN_DRIVERS_DIR)/pst90s $(FBA_BURN_DRIVERS_DIR)/sega $(FBA_BURN_DRIVERS_DIR)/sg1000 $(SMS_DIR) $(FBA_BURN_DRIVERS_DIR)/snes $(FBA_BURN_DRIVERS_DIR)/taito $(FBA_BURN_DRIVERS_DIR)/toaplan
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/neo_sprite_func.h..."
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/neo_sprite_func_table.h..."
	@echo ""
	$(PERL) $(FBA_SCRIPTS_DIR)/neo_sprite_func.pl -o $(FBA_GENERATED_DIR)/neo_sprite_func.h $(LIBRETRO_OPTIMIZATIONS)
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/psikyo_tile_func.h..."
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/psikyo_tile_func_table.h..."
	@echo ""
	$(PERL) $(FBA_SCRIPTS_DIR)/psikyo_tile_func.pl -o $(FBA_GENERATED_DIR)/psikyo_tile_func.h
	@echo "Generating $(FBA_GENERATED_DIR)/cave_sprite_func.h..."
	@echo ""
	@echo "Generating[ $(FBA_GENERATED_DIR)/cave_tile_func_table.h"
	@echo ""
	$(PERL) $(FBA_SCRIPTS_DIR)/cave_sprite_func.pl -o $(FBA_GENERATED_DIR)/cave_sprite_func.h
	$(PERL) $(FBA_SCRIPTS_DIR)/cave_tile_func.pl -o $(FBA_GENERATED_DIR)/cave_tile_func.h
	@echo ""
	@echo "Generate $(FBA_GENERATED_DIR)/toa_gp9001_func_table.h"
	@echo ""
	$(PERL) $(FBA_SCRIPTS_DIR)/toa_gp9001_func.pl -o $(FBA_GENERATED_DIR)/toa_gp9001_func.h
	$(CXX_SYSTEM) $(GENERATE_OPTS) -o $(PGM_SPRITE_CREATE_EXE) $(FBA_BURN_DRIVERS_DIR)/pgm/pgm_sprite_create.cpp
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/pgm_sprite.h..."
	@echo ""
	$(EXE_PREFIX)$(PGM_SPRITE_CREATE_EXE) > $(FBA_GENERATED_DIR)/pgm_sprite.h
	$(CC_SYSTEM) $(GENERATE_OPTS) -o $(M68KMAKE_EXE) $(FBA_CPU_DIR)/m68k/m68kmake.c
	$(EXE_PREFIX)$(M68KMAKE_EXE) $(FBA_CPU_DIR)/m68k/ $(FBA_CPU_DIR)/m68k/m68k_in.c
	$(CXX_SYSTEM) $(GENERATE_OPTS) -o $(CTVMAKE_EXE) $(FBA_BURN_DRIVERS_DIR)/capcom/ctv_make.cpp
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/ctv.h..."
	@echo ""
	$(EXE_PREFIX)$(CTVMAKE_EXE) > $(FBA_GENERATED_DIR)/ctv.h

%.o: %.c
	$(CC) $(CFLAGS) $(INCFLAGS) -c $^ -o $@

%.o: %.cpp
	$(CXX) $(CXXFLAGS) $(INCFLAGS) -c $^ -o $@

$(TARGET): $(OBJS)
	@echo "LD $@"
ifeq ($(STATIC_LINKING), 1)
	@$(AR) rcs $@ $(OBJS)
else
	@$(CXX) -o $@ $(SHARED) $(OBJS) $(LDFLAGS)
endif

clean-objs:
	rm -f $(OBJS)

clean:
	rm -f $(TARGET)
	rm -f $(OBJS)
	rm -f $(M68KMAKE_EXE)
	rm -f $(PGM_SPRITE_CREATE_EXE)
	rm -f $(CTVMAKE_EXE)
endif
